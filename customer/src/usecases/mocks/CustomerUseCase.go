// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/gabrielmvnog/go-coupon/customer/src/models"
	mock "github.com/stretchr/testify/mock"
)

// CustomerUseCase is an autogenerated mock type for the CustomerUseCase type
type CustomerUseCase struct {
	mock.Mock
}

// CreateCustomer provides a mock function with given fields: ctx, customer
func (_m *CustomerUseCase) CreateCustomer(ctx context.Context, customer models.Customer) *models.Customer {
	ret := _m.Called(ctx, customer)

	var r0 *models.Customer
	if rf, ok := ret.Get(0).(func(context.Context, models.Customer) *models.Customer); ok {
		r0 = rf(ctx, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	return r0
}

// DeleteCustomer provides a mock function with given fields: ctx, customer_id
func (_m *CustomerUseCase) DeleteCustomer(ctx context.Context, customer_id uint32) error {
	ret := _m.Called(ctx, customer_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, customer_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomerById provides a mock function with given fields: ctx, customer_id
func (_m *CustomerUseCase) GetCustomerById(ctx context.Context, customer_id uint32) (*models.Customer, error) {
	ret := _m.Called(ctx, customer_id)

	var r0 *models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (*models.Customer, error)); ok {
		return rf(ctx, customer_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *models.Customer); ok {
		r0 = rf(ctx, customer_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, customer_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomer provides a mock function with given fields: ctx, customer
func (_m *CustomerUseCase) UpdateCustomer(ctx context.Context, customer models.Customer) *models.Customer {
	ret := _m.Called(ctx, customer)

	var r0 *models.Customer
	if rf, ok := ret.Get(0).(func(context.Context, models.Customer) *models.Customer); ok {
		r0 = rf(ctx, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	return r0
}

// NewCustomerUseCase creates a new instance of CustomerUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerUseCase {
	mock := &CustomerUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
